/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmTreedos.java
 *
 * Created on 17-ene-2011, 14:55:45
 */
package arbolw;

import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.text.Position.Bias;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Wilfo
 */
public class frmTreedos extends javax.swing.JFrame {

    DefaultMutableTreeNode Titulo = null;
    DefaultTreeModel modelo = null;
    clsBook librito;
    int cont = 6;

    /** Creates new form frmTreedos */
    public frmTreedos() {

        initComponents();
        meter();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMirar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        btn_Add = new javax.swing.JButton();
        btn_Remover = new javax.swing.JButton();
        btn_Tag = new javax.swing.JButton();
        btn_Modi = new javax.swing.JButton();

        btnMirar.setText("Correr");
        btnMirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMirarActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(Tree);

        btn_Add.setText("Add");
        btn_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddActionPerformed(evt);
            }
        });

        btn_Remover.setText("Remover");
        btn_Remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoverActionPerformed(evt);
            }
        });

        btn_Tag.setText("Info");
        btn_Tag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TagActionPerformed(evt);
            }
        });

        btn_Modi.setText("Modificar");
        btn_Modi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ModiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btn_Add)
                        .addGap(10, 10, 10)
                        .addComponent(btn_Remover)
                        .addGap(10, 10, 10)
                        .addComponent(btn_Tag)
                        .addGap(6, 6, 6)
                        .addComponent(btn_Modi)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Add)
                    .addComponent(btn_Remover)
                    .addComponent(btn_Tag)
                    .addComponent(btn_Modi))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_RemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoverActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode parentNode = null;
//         DefaultMutableTreeNode child =new DefaultMutableTreeNode(cade);
        TreePath currentSelection = Tree.getSelectionPath();

//        if (parentPath == null) {
//        } else {
//            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
//        }
////       modelo.insertNodeInto(child, parentNode, parentNode.getChildCount());
//        modelo.removeNodeFromParent(parentNode);

        //FORMA CORRECTA DE ELIMINAR UN NODO

        if (currentSelection != null) {
            parentNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            DefaultTreeModel model = ((DefaultTreeModel) Tree.getModel());
            model.removeNodeFromParent(parentNode);
        }
    }//GEN-LAST:event_btn_RemoverActionPerformed

    private void btn_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddActionPerformed
        // TODO add your handling code here:
        String cade = JOptionPane.showInputDialog(this, "Ingrese el nombre del libro :");
        DefaultMutableTreeNode parentNode = null;

        cont++;
        TreePath parentPath = Tree.getSelectionPath();

        if (parentPath == null) {
        } else {
            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
        }
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(new clsBook(cont + "", cade));
        modelo.insertNodeInto(child, parentNode, parentNode.getChildCount());

    }//GEN-LAST:event_btn_AddActionPerformed

    private void btn_TagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TagActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
        if (node == null) //Nothing is selected.
        {
            return;
        }

        Object nodeInfo = node.getUserObject();
        //Si no tiene hojas
//        if (node.isLeaf()) {
        clsBook book = (clsBook) nodeInfo;
        JOptionPane.showMessageDialog(this, book.getId());
//        } else {
        //Si tiene hojas muestra info
//             clsBook book=(clsBook) nodeInfo;
//            JOptionPane.showMessageDialog(this, book.getInfo());
//        }

    }//GEN-LAST:event_btn_TagActionPerformed

    private void btn_ModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ModiActionPerformed
        // TODO add your handling code here:
//         DefaultMutableTreeNode parentNode = null;
////         DefaultMutableTreeNode child =new DefaultMutableTreeNode(cade);
        String cade = JOptionPane.showInputDialog(this, "Ingrese el nuevo nombre");
        TreePath currentSelection = Tree.getSelectionPath();
        if (currentSelection != null) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            Object nodeInfo = node.getUserObject();
            clsBook book = (clsBook) nodeInfo;
            node.setUserObject(new clsBook(book.getId(), cade));
            DefaultTreeModel model = ((DefaultTreeModel) Tree.getModel());
            model.nodeChanged(node);
        }

    }//GEN-LAST:event_btn_ModiActionPerformed

    private void btnMirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMirarActionPerformed
        // TODO add your handling code here:

       searchNode("Books") ;
    //    one();

    }//GEN-LAST:event_btnMirarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        vec();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception e) {
                    System.err.println("Couldn't use system look and feel.");
                }

                new frmTreedos().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Tree;
    private javax.swing.JButton btnMirar;
    private javax.swing.JButton btn_Add;
    private javax.swing.JButton btn_Modi;
    private javax.swing.JButton btn_Remover;
    private javax.swing.JButton btn_Tag;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public DefaultTreeModel cargarArbol() {


        DefaultMutableTreeNode categorias = null;
        DefaultMutableTreeNode libros = null;

        Titulo = new DefaultMutableTreeNode("Centro de Administración");
        modelo = new DefaultTreeModel(Titulo);

        categorias = new DefaultMutableTreeNode(new clsBook("1", "Adm. Redes"));
        libros = new DefaultMutableTreeNode(new clsBook("2", "Dept. de planificación"));
        modelo.insertNodeInto(categorias, Titulo, 0);
        modelo.insertNodeInto(libros, categorias, 0);

        categorias = new DefaultMutableTreeNode(new clsBook("3", "Adm. de Laboratorios"));
        libros = new DefaultMutableTreeNode(new clsBook("4", "Dept. de Tecnologia"));
        modelo.insertNodeInto(categorias, Titulo, 1);
        modelo.insertNodeInto(libros, categorias, 0);

        categorias = new DefaultMutableTreeNode(new clsBook("5", "Dept. de Investigación"));
        libros = new DefaultMutableTreeNode(new clsBook("6", "Dept. A"));
        modelo.insertNodeInto(categorias, Titulo, 2);
        modelo.insertNodeInto(libros, categorias, 0);

//        modelo.insertNodeInto(padre, abuelo, 0);
//        modelo.insertNodeInto(tio, padre, 0);
//        // modelo.insertNodeInto(tio, padre, 0);
//        modelo.insertNodeInto(hijo, padre, 0);
//        modelo.insertNodeInto(hija, padre, 0);
//        Tree.setModel(modelo);

        return modelo;
    }

    public void meter() {
        Tree.setModel(cargarArbol());
    }

    public void searchNode(String nodeStr) {
        int count = 0;
        DefaultMutableTreeNode node = null;
      
        Enumeration e = Titulo.breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            if (count >=1 && count<=9) {
                modelo.insertNodeInto(new DefaultMutableTreeNode("ha") , node, node.getChildCount());
            }
            if (nodeStr.equals(node.getUserObject().toString())) {
                JOptionPane.showMessageDialog(this, node.getUserObject().toString());
            }
            JOptionPane.showMessageDialog(this, node.getUserObject().toString());
            count++;
        }
   
    }

    public void one() {
        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode cab = new DefaultMutableTreeNode("a1");
        Enumeration e = Titulo.breadthFirstEnumeration();
        e.hasMoreElements();
        e.hasMoreElements();
        modelo.insertNodeInto(cab, node, 1);
        node = (DefaultMutableTreeNode) e.nextElement();
        JOptionPane.showMessageDialog(this, node.getUserObject().toString());
    }
    public void vec(){
  DefaultMutableTreeNode node = null;
 
   int count = 0;
  
        Enumeration e = Titulo.breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            if (count >=1 && count<=1) {
            for(int k=1;k<=2;k++)
             modelo.insertNodeInto(new DefaultMutableTreeNode("A 1."+k) , node, node.getChildCount());
            }

            JOptionPane.showMessageDialog(this, node.getUserObject().toString());
            count++;
        }
        
    }
}
